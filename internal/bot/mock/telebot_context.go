// Code generated by mockery v2.42.0. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"
	telebot "gopkg.in/telebot.v3"

	time "time"
)

// TelebotContext is an autogenerated mock type for the Context type
type TelebotContext struct {
	mock.Mock
}

type TelebotContext_Expecter struct {
	mock *mock.Mock
}

func (_m *TelebotContext) EXPECT() *TelebotContext_Expecter {
	return &TelebotContext_Expecter{mock: &_m.Mock}
}

// Accept provides a mock function with given fields: errorMessage
func (_m *TelebotContext) Accept(errorMessage ...string) error {
	_va := make([]interface{}, len(errorMessage))
	for _i := range errorMessage {
		_va[_i] = errorMessage[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(errorMessage...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Accept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accept'
type TelebotContext_Accept_Call struct {
	*mock.Call
}

// Accept is a helper method to define mock.On call
//   - errorMessage ...string
func (_e *TelebotContext_Expecter) Accept(errorMessage ...interface{}) *TelebotContext_Accept_Call {
	return &TelebotContext_Accept_Call{Call: _e.mock.On("Accept",
		append([]interface{}{}, errorMessage...)...)}
}

func (_c *TelebotContext_Accept_Call) Run(run func(errorMessage ...string)) *TelebotContext_Accept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_Accept_Call) Return(_a0 error) *TelebotContext_Accept_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Accept_Call) RunAndReturn(run func(...string) error) *TelebotContext_Accept_Call {
	_c.Call.Return(run)
	return _c
}

// Answer provides a mock function with given fields: resp
func (_m *TelebotContext) Answer(resp *telebot.QueryResponse) error {
	ret := _m.Called(resp)

	if len(ret) == 0 {
		panic("no return value specified for Answer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.QueryResponse) error); ok {
		r0 = rf(resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Answer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Answer'
type TelebotContext_Answer_Call struct {
	*mock.Call
}

// Answer is a helper method to define mock.On call
//   - resp *telebot.QueryResponse
func (_e *TelebotContext_Expecter) Answer(resp interface{}) *TelebotContext_Answer_Call {
	return &TelebotContext_Answer_Call{Call: _e.mock.On("Answer", resp)}
}

func (_c *TelebotContext_Answer_Call) Run(run func(resp *telebot.QueryResponse)) *TelebotContext_Answer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*telebot.QueryResponse))
	})
	return _c
}

func (_c *TelebotContext_Answer_Call) Return(_a0 error) *TelebotContext_Answer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Answer_Call) RunAndReturn(run func(*telebot.QueryResponse) error) *TelebotContext_Answer_Call {
	_c.Call.Return(run)
	return _c
}

// Args provides a mock function with given fields:
func (_m *TelebotContext) Args() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Args")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// TelebotContext_Args_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Args'
type TelebotContext_Args_Call struct {
	*mock.Call
}

// Args is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Args() *TelebotContext_Args_Call {
	return &TelebotContext_Args_Call{Call: _e.mock.On("Args")}
}

func (_c *TelebotContext_Args_Call) Run(run func()) *TelebotContext_Args_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Args_Call) Return(_a0 []string) *TelebotContext_Args_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Args_Call) RunAndReturn(run func() []string) *TelebotContext_Args_Call {
	_c.Call.Return(run)
	return _c
}

// Bot provides a mock function with given fields:
func (_m *TelebotContext) Bot() *telebot.Bot {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bot")
	}

	var r0 *telebot.Bot
	if rf, ok := ret.Get(0).(func() *telebot.Bot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Bot)
		}
	}

	return r0
}

// TelebotContext_Bot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bot'
type TelebotContext_Bot_Call struct {
	*mock.Call
}

// Bot is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Bot() *TelebotContext_Bot_Call {
	return &TelebotContext_Bot_Call{Call: _e.mock.On("Bot")}
}

func (_c *TelebotContext_Bot_Call) Run(run func()) *TelebotContext_Bot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Bot_Call) Return(_a0 *telebot.Bot) *TelebotContext_Bot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Bot_Call) RunAndReturn(run func() *telebot.Bot) *TelebotContext_Bot_Call {
	_c.Call.Return(run)
	return _c
}

// Callback provides a mock function with given fields:
func (_m *TelebotContext) Callback() *telebot.Callback {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Callback")
	}

	var r0 *telebot.Callback
	if rf, ok := ret.Get(0).(func() *telebot.Callback); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Callback)
		}
	}

	return r0
}

// TelebotContext_Callback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Callback'
type TelebotContext_Callback_Call struct {
	*mock.Call
}

// Callback is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Callback() *TelebotContext_Callback_Call {
	return &TelebotContext_Callback_Call{Call: _e.mock.On("Callback")}
}

func (_c *TelebotContext_Callback_Call) Run(run func()) *TelebotContext_Callback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Callback_Call) Return(_a0 *telebot.Callback) *TelebotContext_Callback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Callback_Call) RunAndReturn(run func() *telebot.Callback) *TelebotContext_Callback_Call {
	_c.Call.Return(run)
	return _c
}

// Chat provides a mock function with given fields:
func (_m *TelebotContext) Chat() *telebot.Chat {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *telebot.Chat
	if rf, ok := ret.Get(0).(func() *telebot.Chat); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Chat)
		}
	}

	return r0
}

// TelebotContext_Chat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chat'
type TelebotContext_Chat_Call struct {
	*mock.Call
}

// Chat is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Chat() *TelebotContext_Chat_Call {
	return &TelebotContext_Chat_Call{Call: _e.mock.On("Chat")}
}

func (_c *TelebotContext_Chat_Call) Run(run func()) *TelebotContext_Chat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Chat_Call) Return(_a0 *telebot.Chat) *TelebotContext_Chat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Chat_Call) RunAndReturn(run func() *telebot.Chat) *TelebotContext_Chat_Call {
	_c.Call.Return(run)
	return _c
}

// ChatJoinRequest provides a mock function with given fields:
func (_m *TelebotContext) ChatJoinRequest() *telebot.ChatJoinRequest {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChatJoinRequest")
	}

	var r0 *telebot.ChatJoinRequest
	if rf, ok := ret.Get(0).(func() *telebot.ChatJoinRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.ChatJoinRequest)
		}
	}

	return r0
}

// TelebotContext_ChatJoinRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatJoinRequest'
type TelebotContext_ChatJoinRequest_Call struct {
	*mock.Call
}

// ChatJoinRequest is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) ChatJoinRequest() *TelebotContext_ChatJoinRequest_Call {
	return &TelebotContext_ChatJoinRequest_Call{Call: _e.mock.On("ChatJoinRequest")}
}

func (_c *TelebotContext_ChatJoinRequest_Call) Run(run func()) *TelebotContext_ChatJoinRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_ChatJoinRequest_Call) Return(_a0 *telebot.ChatJoinRequest) *TelebotContext_ChatJoinRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_ChatJoinRequest_Call) RunAndReturn(run func() *telebot.ChatJoinRequest) *TelebotContext_ChatJoinRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ChatMember provides a mock function with given fields:
func (_m *TelebotContext) ChatMember() *telebot.ChatMemberUpdate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChatMember")
	}

	var r0 *telebot.ChatMemberUpdate
	if rf, ok := ret.Get(0).(func() *telebot.ChatMemberUpdate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.ChatMemberUpdate)
		}
	}

	return r0
}

// TelebotContext_ChatMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatMember'
type TelebotContext_ChatMember_Call struct {
	*mock.Call
}

// ChatMember is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) ChatMember() *TelebotContext_ChatMember_Call {
	return &TelebotContext_ChatMember_Call{Call: _e.mock.On("ChatMember")}
}

func (_c *TelebotContext_ChatMember_Call) Run(run func()) *TelebotContext_ChatMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_ChatMember_Call) Return(_a0 *telebot.ChatMemberUpdate) *TelebotContext_ChatMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_ChatMember_Call) RunAndReturn(run func() *telebot.ChatMemberUpdate) *TelebotContext_ChatMember_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function with given fields:
func (_m *TelebotContext) Data() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TelebotContext_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type TelebotContext_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Data() *TelebotContext_Data_Call {
	return &TelebotContext_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *TelebotContext_Data_Call) Run(run func()) *TelebotContext_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Data_Call) Return(_a0 string) *TelebotContext_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Data_Call) RunAndReturn(run func() string) *TelebotContext_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields:
func (_m *TelebotContext) Delete() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TelebotContext_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Delete() *TelebotContext_Delete_Call {
	return &TelebotContext_Delete_Call{Call: _e.mock.On("Delete")}
}

func (_c *TelebotContext_Delete_Call) Run(run func()) *TelebotContext_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Delete_Call) Return(_a0 error) *TelebotContext_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Delete_Call) RunAndReturn(run func() error) *TelebotContext_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAfter provides a mock function with given fields: d
func (_m *TelebotContext) DeleteAfter(d time.Duration) *time.Timer {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAfter")
	}

	var r0 *time.Timer
	if rf, ok := ret.Get(0).(func(time.Duration) *time.Timer); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Timer)
		}
	}

	return r0
}

// TelebotContext_DeleteAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAfter'
type TelebotContext_DeleteAfter_Call struct {
	*mock.Call
}

// DeleteAfter is a helper method to define mock.On call
//   - d time.Duration
func (_e *TelebotContext_Expecter) DeleteAfter(d interface{}) *TelebotContext_DeleteAfter_Call {
	return &TelebotContext_DeleteAfter_Call{Call: _e.mock.On("DeleteAfter", d)}
}

func (_c *TelebotContext_DeleteAfter_Call) Run(run func(d time.Duration)) *TelebotContext_DeleteAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *TelebotContext_DeleteAfter_Call) Return(_a0 *time.Timer) *TelebotContext_DeleteAfter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_DeleteAfter_Call) RunAndReturn(run func(time.Duration) *time.Timer) *TelebotContext_DeleteAfter_Call {
	_c.Call.Return(run)
	return _c
}

// Edit provides a mock function with given fields: what, opts
func (_m *TelebotContext) Edit(what interface{}, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(what, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Edit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit'
type TelebotContext_Edit_Call struct {
	*mock.Call
}

// Edit is a helper method to define mock.On call
//   - what interface{}
//   - opts ...interface{}
func (_e *TelebotContext_Expecter) Edit(what interface{}, opts ...interface{}) *TelebotContext_Edit_Call {
	return &TelebotContext_Edit_Call{Call: _e.mock.On("Edit",
		append([]interface{}{what}, opts...)...)}
}

func (_c *TelebotContext_Edit_Call) Run(run func(what interface{}, opts ...interface{})) *TelebotContext_Edit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_Edit_Call) Return(_a0 error) *TelebotContext_Edit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Edit_Call) RunAndReturn(run func(interface{}, ...interface{}) error) *TelebotContext_Edit_Call {
	_c.Call.Return(run)
	return _c
}

// EditCaption provides a mock function with given fields: caption, opts
func (_m *TelebotContext) EditCaption(caption string, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, caption)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditCaption")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(caption, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_EditCaption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditCaption'
type TelebotContext_EditCaption_Call struct {
	*mock.Call
}

// EditCaption is a helper method to define mock.On call
//   - caption string
//   - opts ...interface{}
func (_e *TelebotContext_Expecter) EditCaption(caption interface{}, opts ...interface{}) *TelebotContext_EditCaption_Call {
	return &TelebotContext_EditCaption_Call{Call: _e.mock.On("EditCaption",
		append([]interface{}{caption}, opts...)...)}
}

func (_c *TelebotContext_EditCaption_Call) Run(run func(caption string, opts ...interface{})) *TelebotContext_EditCaption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_EditCaption_Call) Return(_a0 error) *TelebotContext_EditCaption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_EditCaption_Call) RunAndReturn(run func(string, ...interface{}) error) *TelebotContext_EditCaption_Call {
	_c.Call.Return(run)
	return _c
}

// EditOrReply provides a mock function with given fields: what, opts
func (_m *TelebotContext) EditOrReply(what interface{}, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditOrReply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(what, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_EditOrReply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditOrReply'
type TelebotContext_EditOrReply_Call struct {
	*mock.Call
}

// EditOrReply is a helper method to define mock.On call
//   - what interface{}
//   - opts ...interface{}
func (_e *TelebotContext_Expecter) EditOrReply(what interface{}, opts ...interface{}) *TelebotContext_EditOrReply_Call {
	return &TelebotContext_EditOrReply_Call{Call: _e.mock.On("EditOrReply",
		append([]interface{}{what}, opts...)...)}
}

func (_c *TelebotContext_EditOrReply_Call) Run(run func(what interface{}, opts ...interface{})) *TelebotContext_EditOrReply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_EditOrReply_Call) Return(_a0 error) *TelebotContext_EditOrReply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_EditOrReply_Call) RunAndReturn(run func(interface{}, ...interface{}) error) *TelebotContext_EditOrReply_Call {
	_c.Call.Return(run)
	return _c
}

// EditOrSend provides a mock function with given fields: what, opts
func (_m *TelebotContext) EditOrSend(what interface{}, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditOrSend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(what, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_EditOrSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditOrSend'
type TelebotContext_EditOrSend_Call struct {
	*mock.Call
}

// EditOrSend is a helper method to define mock.On call
//   - what interface{}
//   - opts ...interface{}
func (_e *TelebotContext_Expecter) EditOrSend(what interface{}, opts ...interface{}) *TelebotContext_EditOrSend_Call {
	return &TelebotContext_EditOrSend_Call{Call: _e.mock.On("EditOrSend",
		append([]interface{}{what}, opts...)...)}
}

func (_c *TelebotContext_EditOrSend_Call) Run(run func(what interface{}, opts ...interface{})) *TelebotContext_EditOrSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_EditOrSend_Call) Return(_a0 error) *TelebotContext_EditOrSend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_EditOrSend_Call) RunAndReturn(run func(interface{}, ...interface{}) error) *TelebotContext_EditOrSend_Call {
	_c.Call.Return(run)
	return _c
}

// Entities provides a mock function with given fields:
func (_m *TelebotContext) Entities() telebot.Entities {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Entities")
	}

	var r0 telebot.Entities
	if rf, ok := ret.Get(0).(func() telebot.Entities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(telebot.Entities)
		}
	}

	return r0
}

// TelebotContext_Entities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entities'
type TelebotContext_Entities_Call struct {
	*mock.Call
}

// Entities is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Entities() *TelebotContext_Entities_Call {
	return &TelebotContext_Entities_Call{Call: _e.mock.On("Entities")}
}

func (_c *TelebotContext_Entities_Call) Run(run func()) *TelebotContext_Entities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Entities_Call) Return(_a0 telebot.Entities) *TelebotContext_Entities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Entities_Call) RunAndReturn(run func() telebot.Entities) *TelebotContext_Entities_Call {
	_c.Call.Return(run)
	return _c
}

// Forward provides a mock function with given fields: msg, opts
func (_m *TelebotContext) Forward(msg telebot.Editable, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Forward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Editable, ...interface{}) error); ok {
		r0 = rf(msg, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Forward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forward'
type TelebotContext_Forward_Call struct {
	*mock.Call
}

// Forward is a helper method to define mock.On call
//   - msg telebot.Editable
//   - opts ...interface{}
func (_e *TelebotContext_Expecter) Forward(msg interface{}, opts ...interface{}) *TelebotContext_Forward_Call {
	return &TelebotContext_Forward_Call{Call: _e.mock.On("Forward",
		append([]interface{}{msg}, opts...)...)}
}

func (_c *TelebotContext_Forward_Call) Run(run func(msg telebot.Editable, opts ...interface{})) *TelebotContext_Forward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(telebot.Editable), variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_Forward_Call) Return(_a0 error) *TelebotContext_Forward_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Forward_Call) RunAndReturn(run func(telebot.Editable, ...interface{}) error) *TelebotContext_Forward_Call {
	_c.Call.Return(run)
	return _c
}

// ForwardTo provides a mock function with given fields: to, opts
func (_m *TelebotContext) ForwardTo(to telebot.Recipient, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, to)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ForwardTo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, ...interface{}) error); ok {
		r0 = rf(to, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_ForwardTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForwardTo'
type TelebotContext_ForwardTo_Call struct {
	*mock.Call
}

// ForwardTo is a helper method to define mock.On call
//   - to telebot.Recipient
//   - opts ...interface{}
func (_e *TelebotContext_Expecter) ForwardTo(to interface{}, opts ...interface{}) *TelebotContext_ForwardTo_Call {
	return &TelebotContext_ForwardTo_Call{Call: _e.mock.On("ForwardTo",
		append([]interface{}{to}, opts...)...)}
}

func (_c *TelebotContext_ForwardTo_Call) Run(run func(to telebot.Recipient, opts ...interface{})) *TelebotContext_ForwardTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(telebot.Recipient), variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_ForwardTo_Call) Return(_a0 error) *TelebotContext_ForwardTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_ForwardTo_Call) RunAndReturn(run func(telebot.Recipient, ...interface{}) error) *TelebotContext_ForwardTo_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *TelebotContext) Get(key string) interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// TelebotContext_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TelebotContext_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *TelebotContext_Expecter) Get(key interface{}) *TelebotContext_Get_Call {
	return &TelebotContext_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *TelebotContext_Get_Call) Run(run func(key string)) *TelebotContext_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TelebotContext_Get_Call) Return(_a0 interface{}) *TelebotContext_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Get_Call) RunAndReturn(run func(string) interface{}) *TelebotContext_Get_Call {
	_c.Call.Return(run)
	return _c
}

// InlineResult provides a mock function with given fields:
func (_m *TelebotContext) InlineResult() *telebot.InlineResult {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InlineResult")
	}

	var r0 *telebot.InlineResult
	if rf, ok := ret.Get(0).(func() *telebot.InlineResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.InlineResult)
		}
	}

	return r0
}

// TelebotContext_InlineResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InlineResult'
type TelebotContext_InlineResult_Call struct {
	*mock.Call
}

// InlineResult is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) InlineResult() *TelebotContext_InlineResult_Call {
	return &TelebotContext_InlineResult_Call{Call: _e.mock.On("InlineResult")}
}

func (_c *TelebotContext_InlineResult_Call) Run(run func()) *TelebotContext_InlineResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_InlineResult_Call) Return(_a0 *telebot.InlineResult) *TelebotContext_InlineResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_InlineResult_Call) RunAndReturn(run func() *telebot.InlineResult) *TelebotContext_InlineResult_Call {
	_c.Call.Return(run)
	return _c
}

// Message provides a mock function with given fields:
func (_m *TelebotContext) Message() *telebot.Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Message")
	}

	var r0 *telebot.Message
	if rf, ok := ret.Get(0).(func() *telebot.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	return r0
}

// TelebotContext_Message_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Message'
type TelebotContext_Message_Call struct {
	*mock.Call
}

// Message is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Message() *TelebotContext_Message_Call {
	return &TelebotContext_Message_Call{Call: _e.mock.On("Message")}
}

func (_c *TelebotContext_Message_Call) Run(run func()) *TelebotContext_Message_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Message_Call) Return(_a0 *telebot.Message) *TelebotContext_Message_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Message_Call) RunAndReturn(run func() *telebot.Message) *TelebotContext_Message_Call {
	_c.Call.Return(run)
	return _c
}

// Migration provides a mock function with given fields:
func (_m *TelebotContext) Migration() (int64, int64) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Migration")
	}

	var r0 int64
	var r1 int64
	if rf, ok := ret.Get(0).(func() (int64, int64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// TelebotContext_Migration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migration'
type TelebotContext_Migration_Call struct {
	*mock.Call
}

// Migration is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Migration() *TelebotContext_Migration_Call {
	return &TelebotContext_Migration_Call{Call: _e.mock.On("Migration")}
}

func (_c *TelebotContext_Migration_Call) Run(run func()) *TelebotContext_Migration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Migration_Call) Return(_a0 int64, _a1 int64) *TelebotContext_Migration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelebotContext_Migration_Call) RunAndReturn(run func() (int64, int64)) *TelebotContext_Migration_Call {
	_c.Call.Return(run)
	return _c
}

// Notify provides a mock function with given fields: action
func (_m *TelebotContext) Notify(action telebot.ChatAction) error {
	ret := _m.Called(action)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.ChatAction) error); ok {
		r0 = rf(action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type TelebotContext_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - action telebot.ChatAction
func (_e *TelebotContext_Expecter) Notify(action interface{}) *TelebotContext_Notify_Call {
	return &TelebotContext_Notify_Call{Call: _e.mock.On("Notify", action)}
}

func (_c *TelebotContext_Notify_Call) Run(run func(action telebot.ChatAction)) *TelebotContext_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(telebot.ChatAction))
	})
	return _c
}

func (_c *TelebotContext_Notify_Call) Return(_a0 error) *TelebotContext_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Notify_Call) RunAndReturn(run func(telebot.ChatAction) error) *TelebotContext_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// Poll provides a mock function with given fields:
func (_m *TelebotContext) Poll() *telebot.Poll {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 *telebot.Poll
	if rf, ok := ret.Get(0).(func() *telebot.Poll); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Poll)
		}
	}

	return r0
}

// TelebotContext_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type TelebotContext_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Poll() *TelebotContext_Poll_Call {
	return &TelebotContext_Poll_Call{Call: _e.mock.On("Poll")}
}

func (_c *TelebotContext_Poll_Call) Run(run func()) *TelebotContext_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Poll_Call) Return(_a0 *telebot.Poll) *TelebotContext_Poll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Poll_Call) RunAndReturn(run func() *telebot.Poll) *TelebotContext_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// PollAnswer provides a mock function with given fields:
func (_m *TelebotContext) PollAnswer() *telebot.PollAnswer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PollAnswer")
	}

	var r0 *telebot.PollAnswer
	if rf, ok := ret.Get(0).(func() *telebot.PollAnswer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.PollAnswer)
		}
	}

	return r0
}

// TelebotContext_PollAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollAnswer'
type TelebotContext_PollAnswer_Call struct {
	*mock.Call
}

// PollAnswer is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) PollAnswer() *TelebotContext_PollAnswer_Call {
	return &TelebotContext_PollAnswer_Call{Call: _e.mock.On("PollAnswer")}
}

func (_c *TelebotContext_PollAnswer_Call) Run(run func()) *TelebotContext_PollAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_PollAnswer_Call) Return(_a0 *telebot.PollAnswer) *TelebotContext_PollAnswer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_PollAnswer_Call) RunAndReturn(run func() *telebot.PollAnswer) *TelebotContext_PollAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// PreCheckoutQuery provides a mock function with given fields:
func (_m *TelebotContext) PreCheckoutQuery() *telebot.PreCheckoutQuery {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PreCheckoutQuery")
	}

	var r0 *telebot.PreCheckoutQuery
	if rf, ok := ret.Get(0).(func() *telebot.PreCheckoutQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.PreCheckoutQuery)
		}
	}

	return r0
}

// TelebotContext_PreCheckoutQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreCheckoutQuery'
type TelebotContext_PreCheckoutQuery_Call struct {
	*mock.Call
}

// PreCheckoutQuery is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) PreCheckoutQuery() *TelebotContext_PreCheckoutQuery_Call {
	return &TelebotContext_PreCheckoutQuery_Call{Call: _e.mock.On("PreCheckoutQuery")}
}

func (_c *TelebotContext_PreCheckoutQuery_Call) Run(run func()) *TelebotContext_PreCheckoutQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_PreCheckoutQuery_Call) Return(_a0 *telebot.PreCheckoutQuery) *TelebotContext_PreCheckoutQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_PreCheckoutQuery_Call) RunAndReturn(run func() *telebot.PreCheckoutQuery) *TelebotContext_PreCheckoutQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields:
func (_m *TelebotContext) Query() *telebot.Query {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *telebot.Query
	if rf, ok := ret.Get(0).(func() *telebot.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Query)
		}
	}

	return r0
}

// TelebotContext_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type TelebotContext_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Query() *TelebotContext_Query_Call {
	return &TelebotContext_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *TelebotContext_Query_Call) Run(run func()) *TelebotContext_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Query_Call) Return(_a0 *telebot.Query) *TelebotContext_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Query_Call) RunAndReturn(run func() *telebot.Query) *TelebotContext_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Recipient provides a mock function with given fields:
func (_m *TelebotContext) Recipient() telebot.Recipient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recipient")
	}

	var r0 telebot.Recipient
	if rf, ok := ret.Get(0).(func() telebot.Recipient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(telebot.Recipient)
		}
	}

	return r0
}

// TelebotContext_Recipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recipient'
type TelebotContext_Recipient_Call struct {
	*mock.Call
}

// Recipient is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Recipient() *TelebotContext_Recipient_Call {
	return &TelebotContext_Recipient_Call{Call: _e.mock.On("Recipient")}
}

func (_c *TelebotContext_Recipient_Call) Run(run func()) *TelebotContext_Recipient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Recipient_Call) Return(_a0 telebot.Recipient) *TelebotContext_Recipient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Recipient_Call) RunAndReturn(run func() telebot.Recipient) *TelebotContext_Recipient_Call {
	_c.Call.Return(run)
	return _c
}

// Reply provides a mock function with given fields: what, opts
func (_m *TelebotContext) Reply(what interface{}, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Reply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(what, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Reply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reply'
type TelebotContext_Reply_Call struct {
	*mock.Call
}

// Reply is a helper method to define mock.On call
//   - what interface{}
//   - opts ...interface{}
func (_e *TelebotContext_Expecter) Reply(what interface{}, opts ...interface{}) *TelebotContext_Reply_Call {
	return &TelebotContext_Reply_Call{Call: _e.mock.On("Reply",
		append([]interface{}{what}, opts...)...)}
}

func (_c *TelebotContext_Reply_Call) Run(run func(what interface{}, opts ...interface{})) *TelebotContext_Reply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_Reply_Call) Return(_a0 error) *TelebotContext_Reply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Reply_Call) RunAndReturn(run func(interface{}, ...interface{}) error) *TelebotContext_Reply_Call {
	_c.Call.Return(run)
	return _c
}

// Respond provides a mock function with given fields: resp
func (_m *TelebotContext) Respond(resp ...*telebot.CallbackResponse) error {
	_va := make([]interface{}, len(resp))
	for _i := range resp {
		_va[_i] = resp[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Respond")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...*telebot.CallbackResponse) error); ok {
		r0 = rf(resp...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Respond_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Respond'
type TelebotContext_Respond_Call struct {
	*mock.Call
}

// Respond is a helper method to define mock.On call
//   - resp ...*telebot.CallbackResponse
func (_e *TelebotContext_Expecter) Respond(resp ...interface{}) *TelebotContext_Respond_Call {
	return &TelebotContext_Respond_Call{Call: _e.mock.On("Respond",
		append([]interface{}{}, resp...)...)}
}

func (_c *TelebotContext_Respond_Call) Run(run func(resp ...*telebot.CallbackResponse)) *TelebotContext_Respond_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*telebot.CallbackResponse, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*telebot.CallbackResponse)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_Respond_Call) Return(_a0 error) *TelebotContext_Respond_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Respond_Call) RunAndReturn(run func(...*telebot.CallbackResponse) error) *TelebotContext_Respond_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: what, opts
func (_m *TelebotContext) Send(what interface{}, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(what, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type TelebotContext_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - what interface{}
//   - opts ...interface{}
func (_e *TelebotContext_Expecter) Send(what interface{}, opts ...interface{}) *TelebotContext_Send_Call {
	return &TelebotContext_Send_Call{Call: _e.mock.On("Send",
		append([]interface{}{what}, opts...)...)}
}

func (_c *TelebotContext_Send_Call) Run(run func(what interface{}, opts ...interface{})) *TelebotContext_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_Send_Call) Return(_a0 error) *TelebotContext_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Send_Call) RunAndReturn(run func(interface{}, ...interface{}) error) *TelebotContext_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendAlbum provides a mock function with given fields: a, opts
func (_m *TelebotContext) SendAlbum(a telebot.Album, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, a)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Album, ...interface{}) error); ok {
		r0 = rf(a, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_SendAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAlbum'
type TelebotContext_SendAlbum_Call struct {
	*mock.Call
}

// SendAlbum is a helper method to define mock.On call
//   - a telebot.Album
//   - opts ...interface{}
func (_e *TelebotContext_Expecter) SendAlbum(a interface{}, opts ...interface{}) *TelebotContext_SendAlbum_Call {
	return &TelebotContext_SendAlbum_Call{Call: _e.mock.On("SendAlbum",
		append([]interface{}{a}, opts...)...)}
}

func (_c *TelebotContext_SendAlbum_Call) Run(run func(a telebot.Album, opts ...interface{})) *TelebotContext_SendAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(telebot.Album), variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_SendAlbum_Call) Return(_a0 error) *TelebotContext_SendAlbum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_SendAlbum_Call) RunAndReturn(run func(telebot.Album, ...interface{}) error) *TelebotContext_SendAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// Sender provides a mock function with given fields:
func (_m *TelebotContext) Sender() *telebot.User {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sender")
	}

	var r0 *telebot.User
	if rf, ok := ret.Get(0).(func() *telebot.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.User)
		}
	}

	return r0
}

// TelebotContext_Sender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sender'
type TelebotContext_Sender_Call struct {
	*mock.Call
}

// Sender is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Sender() *TelebotContext_Sender_Call {
	return &TelebotContext_Sender_Call{Call: _e.mock.On("Sender")}
}

func (_c *TelebotContext_Sender_Call) Run(run func()) *TelebotContext_Sender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Sender_Call) Return(_a0 *telebot.User) *TelebotContext_Sender_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Sender_Call) RunAndReturn(run func() *telebot.User) *TelebotContext_Sender_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, val
func (_m *TelebotContext) Set(key string, val interface{}) {
	_m.Called(key, val)
}

// TelebotContext_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type TelebotContext_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - val interface{}
func (_e *TelebotContext_Expecter) Set(key interface{}, val interface{}) *TelebotContext_Set_Call {
	return &TelebotContext_Set_Call{Call: _e.mock.On("Set", key, val)}
}

func (_c *TelebotContext_Set_Call) Run(run func(key string, val interface{})) *TelebotContext_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *TelebotContext_Set_Call) Return() *TelebotContext_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *TelebotContext_Set_Call) RunAndReturn(run func(string, interface{})) *TelebotContext_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Ship provides a mock function with given fields: what
func (_m *TelebotContext) Ship(what ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, what...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ship")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(what...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TelebotContext_Ship_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ship'
type TelebotContext_Ship_Call struct {
	*mock.Call
}

// Ship is a helper method to define mock.On call
//   - what ...interface{}
func (_e *TelebotContext_Expecter) Ship(what ...interface{}) *TelebotContext_Ship_Call {
	return &TelebotContext_Ship_Call{Call: _e.mock.On("Ship",
		append([]interface{}{}, what...)...)}
}

func (_c *TelebotContext_Ship_Call) Run(run func(what ...interface{})) *TelebotContext_Ship_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *TelebotContext_Ship_Call) Return(_a0 error) *TelebotContext_Ship_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Ship_Call) RunAndReturn(run func(...interface{}) error) *TelebotContext_Ship_Call {
	_c.Call.Return(run)
	return _c
}

// ShippingQuery provides a mock function with given fields:
func (_m *TelebotContext) ShippingQuery() *telebot.ShippingQuery {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShippingQuery")
	}

	var r0 *telebot.ShippingQuery
	if rf, ok := ret.Get(0).(func() *telebot.ShippingQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.ShippingQuery)
		}
	}

	return r0
}

// TelebotContext_ShippingQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShippingQuery'
type TelebotContext_ShippingQuery_Call struct {
	*mock.Call
}

// ShippingQuery is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) ShippingQuery() *TelebotContext_ShippingQuery_Call {
	return &TelebotContext_ShippingQuery_Call{Call: _e.mock.On("ShippingQuery")}
}

func (_c *TelebotContext_ShippingQuery_Call) Run(run func()) *TelebotContext_ShippingQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_ShippingQuery_Call) Return(_a0 *telebot.ShippingQuery) *TelebotContext_ShippingQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_ShippingQuery_Call) RunAndReturn(run func() *telebot.ShippingQuery) *TelebotContext_ShippingQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Text provides a mock function with given fields:
func (_m *TelebotContext) Text() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Text")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TelebotContext_Text_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Text'
type TelebotContext_Text_Call struct {
	*mock.Call
}

// Text is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Text() *TelebotContext_Text_Call {
	return &TelebotContext_Text_Call{Call: _e.mock.On("Text")}
}

func (_c *TelebotContext_Text_Call) Run(run func()) *TelebotContext_Text_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Text_Call) Return(_a0 string) *TelebotContext_Text_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Text_Call) RunAndReturn(run func() string) *TelebotContext_Text_Call {
	_c.Call.Return(run)
	return _c
}

// Topic provides a mock function with given fields:
func (_m *TelebotContext) Topic() *telebot.Topic {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 *telebot.Topic
	if rf, ok := ret.Get(0).(func() *telebot.Topic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Topic)
		}
	}

	return r0
}

// TelebotContext_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type TelebotContext_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Topic() *TelebotContext_Topic_Call {
	return &TelebotContext_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *TelebotContext_Topic_Call) Run(run func()) *TelebotContext_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Topic_Call) Return(_a0 *telebot.Topic) *TelebotContext_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Topic_Call) RunAndReturn(run func() *telebot.Topic) *TelebotContext_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields:
func (_m *TelebotContext) Update() telebot.Update {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 telebot.Update
	if rf, ok := ret.Get(0).(func() telebot.Update); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(telebot.Update)
	}

	return r0
}

// TelebotContext_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TelebotContext_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
func (_e *TelebotContext_Expecter) Update() *TelebotContext_Update_Call {
	return &TelebotContext_Update_Call{Call: _e.mock.On("Update")}
}

func (_c *TelebotContext_Update_Call) Run(run func()) *TelebotContext_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelebotContext_Update_Call) Return(_a0 telebot.Update) *TelebotContext_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelebotContext_Update_Call) RunAndReturn(run func() telebot.Update) *TelebotContext_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelebotContext creates a new instance of TelebotContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelebotContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelebotContext {
	mock := &TelebotContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
